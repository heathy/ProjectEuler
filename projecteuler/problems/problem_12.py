"""Problem 12 of https://projecteuler.net"""

from projecteuler.maths_functions import factor_count
from itertools import count


def problem_12():
    """Solution to problem 12."""
    # Triangle number can be defined as n(n+1)/2.
    # n and n+1 share only the factor 1.
    # Therefore the total number of factors of a triangle number is the product
    # of the factors of n/2 and n+1 or (n+1)/2 and n depending on if n is
    # even or odd.
    for number in count():
        if number % 2 == 0:
            half = number / 2
            number_plus = number + 1
            factor_number = factor_count(half) + factor_count(number_plus)



            if factor_number > 500:
                answer = int(half * number_plus)
                break
        else:
            half_plus = (number + 1) / 2
            factor_number = factor_count(half_plus) * factor_count(number)


            if factor_number > 500:
                answer = int(half_plus * number)
                break

    return answer

if __name__ == '__main__':
    print(problem_12())

# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?
